create table cost_agg_t1(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cost_agg_t1 select i, random() * 99999, i % 2000 from generate_series(1, 1000000) i;
create table cost_agg_t2 as select * from cost_agg_t1 with no data;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cost_agg_t2 select i, random() * 99999, i % 300000 from generate_series(1, 1000000) i;
--
-- Test planner's decisions on aggregates when only little memory is available.
--
set statement_mem= '1800 kB';
-- There are only 2000 distinct values of 'c' in the table, which fits
-- comfortably in an in-memory hash table.
explain select avg(b) from cost_agg_t1 group by c;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=16552.97..16577.97 rows=2000 width=36)
   ->  Finalize HashAggregate  (cost=16552.97..16577.97 rows=667 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=16345.00..16525.00 rows=2000 width=36)
               Hash Key: c
               ->  Partial HashAggregate  (cost=16345.00..16405.00 rows=2000 width=36)
                     Group Key: c
                     ->  Seq Scan on cost_agg_t1  (cost=0.00..11345.00 rows=333334 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

-- In the other table, there are 300000 distinct values of 'c', which doesn't
-- fit in statement_mem. The planner chooses to do a single-phase agg for this.
--
-- In the single-phase plan, the aggregation is performed after redistrbuting
-- the data, which means that each node only has to process 1/(# of segments)
-- fraction of the data. That fits in memory, whereas an initial stage before
-- redistributing would not. And it would eliminate only a few rows, anyway.
explain select avg(b) from cost_agg_t2 group by c;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=36645.07..40332.35 rows=294982 width=36)
   ->  HashAggregate  (cost=36645.07..40332.35 rows=98328 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..31345.00 rows=333334 width=8)
               Hash Key: c
               ->  Seq Scan on cost_agg_t2  (cost=0.00..11345.00 rows=333334 width=8)
 Optimizer: Postgres query optimizer
(7 rows)

-- But if there are a lot more duplicate values, the two-stage plan becomes
-- cheaper again, even though it doesn't git in memory and has to spill.
insert into cost_agg_t2 select i, random() * 99999,1 from generate_series(1, 200000) i;
analyze cost_agg_t2;
explain select avg(b) from cost_agg_t2 group by c;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=30914.97..32210.13 rows=103613 width=36)
   ->  Finalize HashAggregate  (cost=30914.97..32210.13 rows=34538 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=19930.20..29255.37 rows=103613 width=36)
               Hash Key: c
               ->  Partial HashAggregate  (cost=19930.20..23038.59 rows=103613 width=36)
                     Group Key: c
                     ->  Seq Scan on cost_agg_t2  (cost=0.00..13614.00 rows=400000 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

drop table cost_agg_t1;
drop table cost_agg_t2;
reset statement_mem;
